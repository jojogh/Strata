/**
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 * 
 * Please see distribution for license.
 */
package com.opengamma.strata.pricer.calibration;

import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.ImmutableMap;
import com.opengamma.strata.collect.tuple.Pair;
import com.opengamma.strata.market.curve.CurveName;
import com.opengamma.strata.math.impl.matrix.DoubleMatrix2D;

/**
 * A bundle of curve building blocks.
 * <p>
 * This bundle contains information produced during curve calibration.
 * The information is used to calculate market quote sensitivity.
 */
@BeanDefinition(builderScope = "private")
public final class CurveBuildingBlockBundle
    implements ImmutableBean {
  // TODO: part of ImmutableRatesProvider?

  /**
   * The bundle of curve building blocks.
   * <p>
   * Each entry contains the curve building block and the relevant part of the inverse Jacobian matrix.
   * The inverse Jacobian matrix is the derivative of the curve parameters with respect to the market quotes.
   */
  @PropertyDefinition(validate = "notNull")
  private final ImmutableMap<CurveName, Pair<CurveBuildingBlock, DoubleMatrix2D>> blocks;

  //-------------------------------------------------------------------------
  /**
   * Obtains a block from a map of curve name to curve block and Jacobian matrix.
   * 
   * @param blocks  the block data
   * @return the block bundle
   */
  public static CurveBuildingBlockBundle of(Map<CurveName, Pair<CurveBuildingBlock, DoubleMatrix2D>> blocks) {
    return new CurveBuildingBlockBundle(blocks);
  }

  /**
   * Returns a new builder used to create a bundle.
   * 
   * @return the builder
   */
  public static CurveBuildingBlockBundleBuilder builder() {
    return new CurveBuildingBlockBundleBuilder();
  }

  //-------------------------------------------------------------------------
  /**
   * Finds the block and inverse Jacobian matrix associated with the specified curve.
   * 
   * @param name  the curve name
   * @return the building block/matrix pair
   * @throws IllegalArgumentException if the name is not found
   */
  public Pair<CurveBuildingBlock, DoubleMatrix2D> getBlock(CurveName name) {
    Pair<CurveBuildingBlock, DoubleMatrix2D> block = blocks.get(name);
    if (block == null) {
      throw new IllegalArgumentException("Block not found for curve: " + name);
    }
    return block;
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code CurveBuildingBlockBundle}.
   * @return the meta-bean, not null
   */
  public static CurveBuildingBlockBundle.Meta meta() {
    return CurveBuildingBlockBundle.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(CurveBuildingBlockBundle.Meta.INSTANCE);
  }

  private CurveBuildingBlockBundle(
      Map<CurveName, Pair<CurveBuildingBlock, DoubleMatrix2D>> blocks) {
    JodaBeanUtils.notNull(blocks, "blocks");
    this.blocks = ImmutableMap.copyOf(blocks);
  }

  @Override
  public CurveBuildingBlockBundle.Meta metaBean() {
    return CurveBuildingBlockBundle.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the bundle of curve building blocks.
   * <p>
   * Each entry contains the curve building block and the relevant part of the inverse Jacobian matrix.
   * The inverse Jacobian matrix is the derivative of the curve parameters with respect to the market quotes.
   * @return the value of the property, not null
   */
  public ImmutableMap<CurveName, Pair<CurveBuildingBlock, DoubleMatrix2D>> getBlocks() {
    return blocks;
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      CurveBuildingBlockBundle other = (CurveBuildingBlockBundle) obj;
      return JodaBeanUtils.equal(getBlocks(), other.getBlocks());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getBlocks());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(64);
    buf.append("CurveBuildingBlockBundle{");
    buf.append("blocks").append('=').append(JodaBeanUtils.toString(getBlocks()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code CurveBuildingBlockBundle}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code blocks} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<ImmutableMap<CurveName, Pair<CurveBuildingBlock, DoubleMatrix2D>>> blocks = DirectMetaProperty.ofImmutable(
        this, "blocks", CurveBuildingBlockBundle.class, (Class) ImmutableMap.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "blocks");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1386164858:  // blocks
          return blocks;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends CurveBuildingBlockBundle> builder() {
      return new CurveBuildingBlockBundle.Builder();
    }

    @Override
    public Class<? extends CurveBuildingBlockBundle> beanType() {
      return CurveBuildingBlockBundle.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code blocks} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ImmutableMap<CurveName, Pair<CurveBuildingBlock, DoubleMatrix2D>>> blocks() {
      return blocks;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -1386164858:  // blocks
          return ((CurveBuildingBlockBundle) bean).getBlocks();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code CurveBuildingBlockBundle}.
   */
  private static final class Builder extends DirectFieldsBeanBuilder<CurveBuildingBlockBundle> {

    private Map<CurveName, Pair<CurveBuildingBlock, DoubleMatrix2D>> blocks = ImmutableMap.of();

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1386164858:  // blocks
          return blocks;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -1386164858:  // blocks
          this.blocks = (Map<CurveName, Pair<CurveBuildingBlock, DoubleMatrix2D>>) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public CurveBuildingBlockBundle build() {
      return new CurveBuildingBlockBundle(
          blocks);
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(64);
      buf.append("CurveBuildingBlockBundle.Builder{");
      buf.append("blocks").append('=').append(JodaBeanUtils.toString(blocks));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
