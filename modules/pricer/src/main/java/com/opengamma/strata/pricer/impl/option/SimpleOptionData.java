/**
 * Copyright (C) 2011 - present by OpenGamma Inc. and the OpenGamma group of companies
 * 
 * Please see distribution for license.
 */
package com.opengamma.strata.pricer.impl.option;

import java.io.Serializable;
import java.util.Set;

import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.light.LightMetaBean;

import com.opengamma.strata.basics.PutCall;

/**
 * Simple representation of a option data.
 */
@BeanDefinition(style = "light")
public final class SimpleOptionData
    implements ImmutableBean, Serializable {

  /**
   * The forward.
   */
  @PropertyDefinition
  private final double forward;
  /**
   * The strike.
   */
  @PropertyDefinition
  private final double strike;
  /**
   * The time to expiry, year fraction.
   */
  @PropertyDefinition
  private final double timeToExpiry;
  /**
   * The discount factor.
   */
  @PropertyDefinition
  private final double discountFactor;
  /**
   * Whether the option is call or put.
   */
  @PropertyDefinition
  private final PutCall putCall;

  //-------------------------------------------------------------------------
  /**
   * Obtains an instance.
   * 
   * @param forward  the forward
   * @param strike  the strike
   * @param timeToExpiry  the time to expiry
   * @param discountFactor  the discount factor
   * @param putCall  whether the option is put or call
   * @return the data
   */
  public static SimpleOptionData of(
      double forward,
      double strike,
      double timeToExpiry,
      double discountFactor,
      PutCall putCall) {

    return new SimpleOptionData(forward, strike, timeToExpiry, discountFactor, putCall);
  }

  //-------------------------------------------------------------------------
  /**
   * Gets the intrinsic value of the option.
   * <p>
   * This is the minimum value.
   * 
   * @return the intrinsic value
   */
  public double getIntrinsicValue() {
    return discountFactor * (putCall.isCall() ? Math.max(forward - strike, 0d) : Math.max(strike - forward, 0d));
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code SimpleOptionData}.
   */
  private static MetaBean META_BEAN = LightMetaBean.of(SimpleOptionData.class);

  /**
   * The meta-bean for {@code SimpleOptionData}.
   * @return the meta-bean, not null
   */
  public static MetaBean meta() {
    return META_BEAN;
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  private SimpleOptionData(
      double forward,
      double strike,
      double timeToExpiry,
      double discountFactor,
      PutCall putCall) {
    this.forward = forward;
    this.strike = strike;
    this.timeToExpiry = timeToExpiry;
    this.discountFactor = discountFactor;
    this.putCall = putCall;
  }

  @Override
  public MetaBean metaBean() {
    return META_BEAN;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the forward.
   * @return the value of the property
   */
  public double getForward() {
    return forward;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the strike.
   * @return the value of the property
   */
  public double getStrike() {
    return strike;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the time to expiry, year fraction.
   * @return the value of the property
   */
  public double getTimeToExpiry() {
    return timeToExpiry;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the discount factor.
   * @return the value of the property
   */
  public double getDiscountFactor() {
    return discountFactor;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets whether the option is call or put.
   * @return the value of the property
   */
  public PutCall getPutCall() {
    return putCall;
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      SimpleOptionData other = (SimpleOptionData) obj;
      return JodaBeanUtils.equal(getForward(), other.getForward()) &&
          JodaBeanUtils.equal(getStrike(), other.getStrike()) &&
          JodaBeanUtils.equal(getTimeToExpiry(), other.getTimeToExpiry()) &&
          JodaBeanUtils.equal(getDiscountFactor(), other.getDiscountFactor()) &&
          JodaBeanUtils.equal(getPutCall(), other.getPutCall());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getForward());
    hash = hash * 31 + JodaBeanUtils.hashCode(getStrike());
    hash = hash * 31 + JodaBeanUtils.hashCode(getTimeToExpiry());
    hash = hash * 31 + JodaBeanUtils.hashCode(getDiscountFactor());
    hash = hash * 31 + JodaBeanUtils.hashCode(getPutCall());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(192);
    buf.append("SimpleOptionData{");
    buf.append("forward").append('=').append(getForward()).append(',').append(' ');
    buf.append("strike").append('=').append(getStrike()).append(',').append(' ');
    buf.append("timeToExpiry").append('=').append(getTimeToExpiry()).append(',').append(' ');
    buf.append("discountFactor").append('=').append(getDiscountFactor()).append(',').append(' ');
    buf.append("putCall").append('=').append(JodaBeanUtils.toString(getPutCall()));
    buf.append('}');
    return buf.toString();
  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
